//************************** PRACTICAL 1 *************************



// Movie Queries

// 1. Write a MongoDB query to get all documents
db.movies.find().pretty();

// 2. Write a MongoDB query to get all documents with writer set to "Quentin Tarantino"
db.movies.find({ writer: "Quentin Tarantino" });

// 3. Write a MongoDB query to get all documents where actors include "Brad Pitt"
db.movies.find({ actors: "Brad Pitt" });
db.movies.find({ actors: { $in: ["Brad Pitt"] } });

// 4. Write a MongoDB query to get all documents with franchise set to "The Hobbit"
db.movies.find({ franchise: "The Hobbit" });

// 5. Write a MongoDB query to get all movies released in the 90s
db.movies.find({ year: { $gte: 1990, $lt: 2000 } });
db.movies.find({ $and: [{ year: { $gt: 1990 } }, { year: { $lt: 2000 } }] });

// 6. Write a MongoDB query to get all movies released before the year 2000 or after 2010
db.movies.find({ $or: [{ year: { $lt: 2000 } }, { year: { $gt: 2010 } }] });

// Update Queries
// 7. Add a synopsis to "The Hobbit: An Unexpected Journey":
// "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
db.movies.update(
    { title: "The Hobbit: An Unexpected Journey" },
    {
        $set: {
            synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
        }
    }
);

// 8. Add a synopsis to "The Hobbit: The Desolation of Smaug":
// "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
db.movies.update(
    { title: "The Hobbit: The Desolation of Smaug" },
    {
        $set: {
            synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
        }
    }
);
// 9. Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
db.movies.update(
    { title: "Pulp Fiction" },
    {
        $push: { actors: "Samuel L. Jackson" }
    }
);

// Text Search Queries

// 10. Write a MongoDB query to find all movies that have a synopsis that contains the word "Bilbo"
db.movies.find({ synopsis: /Bilbo/ });

// 11. Write a MongoDB query to find all movies that have a synopsis that contains the word "Gandalf"
db.movies.find({ synopsis: /Gandalf/ });

// 12. Write a MongoDB query to find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
db.movies.find({
    $and: [
        { synopsis: /Bilbo/ },
        { synopsis: { $not: /Gandalf/ } }
    ]
});

// 13. Write a MongoDB query to find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
db.movies.find({
    $or: [
        { synopsis: /dwarves/ },
        { synopsis: /hobbit/ }
    ]
});

// 14. Write a MongoDB query to find all movies that have a synopsis that contains the word "gold" and "dragon"
db.movies.find({
    $and: [
        { synopsis: /gold/ },
        { synopsis: /dragon/ }
    ]
});

// Delete Queries

// 15. Delete the movie "Pee Wee Herman's Big Adventure"
db.movies.deleteOne({ title: "Pee Wee Herman's Big Adventure" });

// 16. Delete the movie "Avatar"
db.movies.deleteOne({ title: "Avatar" });

// Users Collection Queries

// 17. Write a MongoDB query to find all users
db.users.find().pretty();

// Posts Collection Queries

// 18. Write a MongoDB query to find all posts
db.posts.find().pretty();

// 19. Write a MongoDB query to find all posts that was authored by "GoodGuyGreg"
db.posts.find({ username: "GoodGuyGreg" });

// 20. Write a MongoDB query to find all posts that was authored by "ScumbagSteve"
db.posts.find({ username: "ScumbagSteve" });

// Comments Collection Queries

// 21. Write a MongoDB query to find all comments
db.comments.find().pretty();

// 22. Write a MongoDB query to find all comments that was authored by "GoodGuyGreg"
db.comments.find({ username: "GoodGuyGreg" });

// 23. Write a MongoDB query to find all comments that was authored by "ScumbagSteve"
db.comments.find({ username: "ScumbagSteve" });

// 24. Write a MongoDB query to find all comments belonging to the post "Reports a bug in your code"
db.comments.find({ postid: 3 });
